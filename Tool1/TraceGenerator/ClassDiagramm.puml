@startuml

together {
    class TraceGenerator{
        + TraceGenerator(int argc, char** argv)
    }

    class TraceSaver{
        + {static}writeTraceToFile(vector<bool> trace, string outputFile)
    }

    class Pingparser{
        + vector<bool> readPingFile(const string &filename, unsigned int packetNumber, string outputFile)
        + vector<bool> readPingFile(const string &filename, unsigned int packetNumber)
        + vector<bool> readPcapFile(const string &filename, Protocol protocol, string outputFile)
        + vector<bool> readPcapFile(const string &filename, Protocol protocol)
        + vector<bool> readFile(string filename)
    }

    enum Protocol {
        ICMP
        TCP
        NONE
    }
}

Pingparser -[hidden]-->PaketlossModel
PaketlossModel -[hidden]-->PacketlossParameterParser

package "PaketlossModel" {
    abstract class BasePacketlossModel {
        # long numPackets
        # mt19937 randomGenerator
        # uniform_real_distribution<float> distribution
        # BasePacketlossModel(long numPackets)
        # BasePacketlossModel(unsigned int seed, long numPackets)
        # float generateRandomNumber()
        + {abstract} vector<bool> buildTrace()
        + void calculateBursts(vector<bool> &trace, int &i, int &losscounter, int &receivecounter, int &temp, vector<int> &genSizes)
    }
    class MarkovModel{
        # vector<int> buildTrace()
        + MarkovModel(long numPackets, float p13, float p31, float p32, float p23, float p14)
        + MarkovModel(unsigned int seed, long numPackets, float p13, float p31, float p32, float p23, float p14)
        + vector<int> buildTrace2()
    }

    class GilbertElliotModel{
        + GilbertElliotModel(long numPackets, float p, float r, float k, float h)
        + GilbertElliotModel(unsigned int seed, long numPackets, float p, float r, float k, float h)
        + vector<bool> buildTrace()
        + vector<int> buildTrace2()
    }

    GilbertElliotModel <|-- BasePacketlossModel
    MarkovModel <|-- BasePacketlossModel
}

package "PacketlossParameterParser" {
    enum PacketLossModelType {
        BERNOULLI,
        SIMPLE_GILBERT,
        GILBERT,
        GILBERT_ELLIOT,
        MARKOV
    }

    class ExtractParameter {
        + float *parameter;
        + unsigned long packetCount;
    }

    abstract class PacketLossToParameterParser {
        + PacketLossToParameterParser(PacketLossModelType packetLossModel, string filename)
        + PacketLossToParameterParser(PacketLossModelType packetLossModelType, vector<bool> trace)
        + ExtractParameter parseParameter()
        + ExtractParameter parseParameter(unsigned int gMin)
    }

    class BernoulliParser {
        + ExtractParameter parseParameter()
    }

    class SimpleGilbertParser {
        + float *parseParameter(vector<bool> trace)
    }

    class MarkovParser {
        + float *parseParameter(vector<bool> trace, unsigned int gMin)
    }

    class GilbertParser {
        + float *parseParameter(vector<bool> trace, unsigned int gMin)
    }

    class GilbertElliotParser {
        + float *parseParameter(vector<bool> trace, unsigned int gMin)
    }

    class BruteForceParser {
        # void calcLoss(vector<bool> &trace, float &lossrate, float &burstsize, float &goodsize, vector<int> &overallsizes);
        # void calcDistFunction(vector<int> &sizes, vector<vector<float> > &distFunction);
        # bool kstest(vector<vector<float> > origDistFunction, vector<vector<float> > &generatedDistFunction, long m, long n);
        # void findTopX(vector<vector<float> > &top, vector<vector<float> > &possibleParams, int x, string model);
        # virtual vector<float> checkResult(vector<vector<float>> avgburstsizes, float origburstsize, vector<vector<float>> possibleParams, float origLoss, float origgoodsize)
    }

    MarkovParser <|-- BruteForceParser
    GilbertParser <|-- BruteForceParser
    GilbertElliotParser <|-- BruteForceParser
}


@enduml